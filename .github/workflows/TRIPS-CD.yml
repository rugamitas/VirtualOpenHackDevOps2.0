name: TRIPS CD

  # Controls when the action will run. Triggers the workflow on push or pull request

  # events but only for the master branch
  on:
    push:
      branches: [ POI(ASP.Net) ]
      paths:
        - 'apis/trips/**'
        - '.github/workflows/trips-cd.yml'

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
  jobs:
    # This workflow contains a single job called "build"
    deploy:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2
        
        
        #Azure CLI login task
        - name: 'Login via Azure CLI'
          uses: Azure/login@v1.1
          with:
            # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
            creds: ${{ secrets.AZURE_CREDENTIALS }}        

        - name: Docker Login
          uses: Azure/docker-login@v1
          with:
            username: ${{ secrets.REGISTRY_USERNAME }} 
            password: ${{ secrets.AZURE_ACR_KEY }}
            login-server: ${{ secrets.AZURE_ACR }}

        # Runs a single command using the runners shell
        - name: Build Docker Container
          run: docker build apis/trips -t ${{ secrets.AZURE_ACR }}/${{ secrets.TRIPS_CONTAINER_REPO }}:${{ github.run_number }} --build-arg build_version=${{github.run_number}}
        
        # Runs a set of commands using the runners shell
        - name: Push to ACR
          run: docker push ${{ secrets.AZURE_ACR }}/${{ secrets.TRIPS_CONTAINER_REPO }}:${{ github.run_number }}
        
        - name: Deploy to Azure Web App staging slot
          uses: Azure/webapps-deploy@v2
          with:
            app-name: openhackt9f3u9t8trips
            slot-name: staging
            images: "${{ secrets.AZURE_ACR }}/${{ secrets.TRIPS_CONTAINER_REPO }}:${{ github.run_number }}"
          
    #### the following code checks the health of staging slot before deploying the release to production slot ####
    test:
      needs: [deploy]
      runs-on: windows-latest
      steps:
        - name: Test the Staging Slot
          run: |
            $R = Invoke-WebRequest -Method Get -URI 'https://openhackt9f3u9t8trips-staging.azurewebsites.net/api/healthcheck/trips'
            $timestamp = Get-Date
            $output = ""
            $output = '{0} | {1} | {2}' -f($timestamp, $R.StatusCode, $Uri)

            if($R.StatusCode -ne '200'){
              exit 1
            } else {
              $output = '{0} | {1}' -f($timestamp, $R.StatusCode)
            }

            Write-Output $output
            Start-Sleep -Seconds 1

          shell: powershell

            ##### the following rollbacks the release in case the staging slot is unhealthy #####

        - name: Rollback Release
          if: failure()
          uses: author/action-rollback@stable
          with:
            # Using a known release ID
            id: ${{ steps.create_release.id }}

  # Using a tag name
  tag: 'v1.0.1'
  # Always delete the tag, even if a release is not associated with it.
  always_delete_tag: true
  env:
  GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

    #Lets execute the swap 
    swap:
      needs : [test]
      runs-on: ubuntu-latest
      steps:
        - name: Create a Github Issue
          uses: actions/github-script@0.9.0
          with:
            script: |
              github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: ' Manually approve the TRIPS Deployment before pushing to production',
            assignees: [ '${{ github.actor }}' ],
            body: 'Please perform the following:<br><br>* navigate to [the API\'s swagger endpoint](https://openhackt9f3u9t8trips-staging.azurewebsites.net/api/docs/trips/index.html)<br>* if everything looks good, comment `/approve` to deploy to production<br><br>Current version in prod: ${{ env.prod-version }}<br><br>Version in staging: ${{ env.staging-version }}'
            }) 

        # TODO Check for approve action for above step before running the below swap action: 

        - name: 'Login via Azure CLI'
          uses: Azure/login@v1.1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Swap Prod to Staging
          uses: Azure/CLI@v1
          with:
            inlineScript: |
              az webapp deployment slot swap -g openhackt9f3u9t8rg -n openhackt9f3u9t8trips --slot staging --target-slot production

          #always execute the logout
          - name: Azure logout
            run: |
              az logout

        

    # - name: Get versions in prod / staging
    # uses: Azure/CLI@v1
    # with:
    # inlineScript: |
    # staging=`az webapp config container show -n openhackggp0ljh0trips --slot staging -g openhackggp0ljh0rg | grep openhackt9f3u9t8acr.azurecr.io/devopsoh/api-trips | awk '{print $2}'`
    # prod=`az webapp config container show -n openhackggp0ljh0trips -g openhackggp0ljh0rg | grep openhackt9f3u9t8acr.azurecr.io/devopsoh/api-trips | awk '{print $2}'`
    # echo ::set-env name=staging-version::$staging
    # echo ::set-env name=prod-version::$prod
